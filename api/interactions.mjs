// api/interactions.mjs ‚Äî Discord Interactions (ESM)
import nacl from "tweetnacl";

function getStrOpt(interaction, name, def = "") {
  const opts = interaction?.data?.options || [];
  const found = opts.find(
    (o) => (o?.name || "").toLowerCase() === name.toLowerCase()
  );
  return found && typeof found.value !== "undefined"
    ? String(found.value)
    : def;
}

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).send("Method Not Allowed");

  // Buffer raw body (required for signature verification)
  const chunks = [];
  for await (const c of req) chunks.push(c);
  const raw = Buffer.concat(chunks);

  const sig = req.headers["x-signature-ed25519"];
  const ts = req.headers["x-signature-timestamp"];
  const key = process.env.DISCORD_PUBLIC_KEY;
  if (!sig || !ts || !key) return res.status(401).send("Missing headers/env");

  const ok = nacl.sign.detached.verify(
    Buffer.concat([Buffer.from(ts), raw]),
    Buffer.from(sig, "hex"),
    Buffer.from(key, "hex")
  );
  if (!ok) return res.status(401).send("Bad signature");

  const i = JSON.parse(raw.toString("utf8"));
  if (i.type === 1) return res.status(200).json({ type: 1 }); // PING

  if (i.type === 2) {
    const name = (i?.data?.name || "").toLowerCase();

    switch (name) {
      case "ping":
        return res
          .status(200)
          .json({ type: 4, data: { content: "üèì Pong from Vercel" } });

      case "futures": {
        const sport = getStrOpt(i, "sport", "NFL");
        const type = getStrOpt(i, "type", "All");
        const category = getStrOpt(i, "category", "");
        const base = process.env.PUBLIC_BASE_URL;

        if (!base) {
          return res.status(200).json({
            type: 4,
            data: {
              content: "Config missing: set PUBLIC_BASE_URL in Vercel env",
              allowed_mentions: { parse: [] },
            },
          });
        }

        const siteBase = base.replace(/\/$/, "");
        const params = new URLSearchParams();
        if (sport) params.set("sport", sport);
        if (type) params.set("type", type);
        if (category) params.set("category", category);

        // Always set group=All (UI expects it)
        params.set("group", "All");

        const target = `${siteBase}/futures?${params.toString()}`;

        // üÜï Build selector to wait for in /api/snap
        const sel = `#futures-modal[data-active-category="${
          category || "All"
        }"]`;

        // Image URL generated by your snap endpoint
        const snapUrl = `${siteBase}/api/snap?url=${encodeURIComponent(
          target
        )}&w=1080&h=1350&wait=500&sel=${encodeURIComponent(
          sel
        )}&t=${Date.now()}`;

        return res.status(200).json({
          type: 4, // CHANNEL_MESSAGE_WITH_SOURCE
          data: {
            embeds: [
              {
                image: { url: snapUrl },
              },
            ],
            allowed_mentions: { parse: [] },
          },
        });
      }

      default:
        return res.status(200).json({
          type: 4,
          data: { content: `ü§î Unknown command: \`${name}\`` },
        });
    }
  }

  return res.status(200).json({ type: 4, data: { content: "Unhandled." } });
}
